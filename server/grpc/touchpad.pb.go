// Code generated by protoc-gen-go. DO NOT EDIT.
// source: touchpad.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	touchpad.proto

It has these top-level messages:
	MoveRequest
	MoveReply
	MoveEvent
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MoveRequest struct {
	MoveEvents []*MoveEvent `protobuf:"bytes,1,rep,name=move_events,json=moveEvents" json:"move_events,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MoveRequest) GetMoveEvents() []*MoveEvent {
	if m != nil {
		return m.MoveEvents
	}
	return nil
}

type MoveReply struct {
}

func (m *MoveReply) Reset()                    { *m = MoveReply{} }
func (m *MoveReply) String() string            { return proto.CompactTextString(m) }
func (*MoveReply) ProtoMessage()               {}
func (*MoveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MoveEvent struct {
	PointerId int32 `protobuf:"varint,1,opt,name=pointer_id,json=pointerId" json:"pointer_id,omitempty"`
	PositionX int32 `protobuf:"varint,2,opt,name=position_x,json=positionX" json:"position_x,omitempty"`
	PositionY int32 `protobuf:"varint,3,opt,name=position_y,json=positionY" json:"position_y,omitempty"`
	Pressure  int32 `protobuf:"varint,4,opt,name=pressure" json:"pressure,omitempty"`
}

func (m *MoveEvent) Reset()                    { *m = MoveEvent{} }
func (m *MoveEvent) String() string            { return proto.CompactTextString(m) }
func (*MoveEvent) ProtoMessage()               {}
func (*MoveEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MoveEvent) GetPointerId() int32 {
	if m != nil {
		return m.PointerId
	}
	return 0
}

func (m *MoveEvent) GetPositionX() int32 {
	if m != nil {
		return m.PositionX
	}
	return 0
}

func (m *MoveEvent) GetPositionY() int32 {
	if m != nil {
		return m.PositionY
	}
	return 0
}

func (m *MoveEvent) GetPressure() int32 {
	if m != nil {
		return m.Pressure
	}
	return 0
}

func init() {
	proto.RegisterType((*MoveRequest)(nil), "grpc.MoveRequest")
	proto.RegisterType((*MoveReply)(nil), "grpc.MoveReply")
	proto.RegisterType((*MoveEvent)(nil), "grpc.MoveEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Touchpad service

type TouchpadClient interface {
	Move(ctx context.Context, in *MoveRequest, opts ...grpc1.CallOption) (*MoveReply, error)
}

type touchpadClient struct {
	cc *grpc1.ClientConn
}

func NewTouchpadClient(cc *grpc1.ClientConn) TouchpadClient {
	return &touchpadClient{cc}
}

func (c *touchpadClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc1.CallOption) (*MoveReply, error) {
	out := new(MoveReply)
	err := grpc1.Invoke(ctx, "/grpc.Touchpad/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Touchpad service

type TouchpadServer interface {
	Move(context.Context, *MoveRequest) (*MoveReply, error)
}

func RegisterTouchpadServer(s *grpc1.Server, srv TouchpadServer) {
	s.RegisterService(&_Touchpad_serviceDesc, srv)
}

func _Touchpad_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouchpadServer).Move(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Touchpad/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouchpadServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Touchpad_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Touchpad",
	HandlerType: (*TouchpadServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Move",
			Handler:    _Touchpad_Move_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "touchpad.proto",
}

func init() { proto.RegisterFile("touchpad.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xc9, 0x2f, 0x4d,
	0xce, 0x28, 0x48, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2f, 0x2a, 0x48,
	0x56, 0xb2, 0xe7, 0xe2, 0xf6, 0xcd, 0x2f, 0x4b, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0x32, 0xe0, 0xe2, 0xce, 0xcd, 0x2f, 0x4b, 0x8d, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0x29, 0x96, 0x60,
	0x54, 0x60, 0xd6, 0xe0, 0x36, 0xe2, 0xd7, 0x03, 0x29, 0xd5, 0x03, 0xa9, 0x73, 0x05, 0x89, 0x07,
	0x71, 0xe5, 0xc2, 0x98, 0xc5, 0x4a, 0xdc, 0x5c, 0x9c, 0x10, 0x03, 0x0a, 0x72, 0x2a, 0x95, 0x5a,
	0x18, 0x21, 0x3c, 0xb0, 0x9c, 0x90, 0x2c, 0x17, 0x57, 0x41, 0x7e, 0x66, 0x5e, 0x49, 0x6a, 0x51,
	0x7c, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x27, 0x54, 0xc4, 0x33, 0x05, 0x22,
	0x5d, 0x9c, 0x59, 0x92, 0x99, 0x9f, 0x17, 0x5f, 0x21, 0xc1, 0x04, 0x93, 0x86, 0x88, 0x44, 0xa0,
	0x48, 0x57, 0x4a, 0x30, 0xa3, 0x4a, 0x47, 0x0a, 0x49, 0x71, 0x71, 0x14, 0x14, 0xa5, 0x16, 0x17,
	0x97, 0x16, 0xa5, 0x4a, 0xb0, 0x80, 0x25, 0xe1, 0x7c, 0x23, 0x0b, 0x2e, 0x8e, 0x10, 0xa8, 0x67,
	0x85, 0x74, 0xb8, 0x58, 0x40, 0x2e, 0x12, 0x12, 0x44, 0x78, 0x02, 0xea, 0x59, 0x29, 0x7e, 0x64,
	0x21, 0x90, 0xf3, 0x19, 0x92, 0xd8, 0xc0, 0x61, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x60,
	0xe2, 0xcc, 0x9c, 0x2d, 0x01, 0x00, 0x00,
}
